plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'de.marcphilipp.nexus-publish' version "0.4.0"
}

apply plugin: 'java-gradle-plugin'

project.ext.version = '1.0.0'

group 'net.i-neb.gradle.plugin'
version project.ext.version

repositories {
    jcenter()
    mavenCentral()
}

test {
    useJUnitPlatform()
}

dependencies {
    compile gradleApi()

    compile('org.jetbrains.kotlin:kotlin-stdlib-jdk8')
    compile('net.jodah:failsafe:2.4.0')
    compile('com.github.docker-java:docker-java-core:3.2.13')
    compile('com.github.docker-java:docker-java-transport-httpclient5:3.2.13')
    compile('org.flywaydb:flyway-core:6.5.1')
    compile('org.liquibase:liquibase-core:3.10.1') {
        exclude group: 'ch.qos.logback', module: 'logback-classic'
    }
    compile('org.slf4j:slf4j-api:1.7.30')

    compile('javax.xml.bind:jaxb-api:2.3.1')
    compile('com.sun.xml.bind:jaxb-core:2.3.0.1')
    compile('javax.activation:activation:1.1.1')
    compile('com.sun.xml.bind:jaxb-impl:2.3.3')

    runtime('org.yaml:snakeyaml:1.26')

    testCompile('org.junit.jupiter:junit-jupiter-api:5.6.2')
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.6.2')
}

gradlePlugin {
    plugins {
        jooqModelatorPlugin {
            id = 'jooq-modelator-plugin'
            implementationClass = 'ch.ayedo.jooqmodelator.gradle.JooqModelatorPlugin'
            displayName = "Jooq-Modelator"
        }
    }
}

nexusPublishing {
    repositories {
        nexus {
            if (project.hasProperty('teamcity.build.branch') && (project['teamcity.build.branch'] as String) == "refs/heads/master") {
                snapshotRepositoryUrl = uri(getProperty('nexus.releaseUrl'))
            } else {
                snapshotRepositoryUrl = uri(getProperty('nexus.snapshotUrl'))
                version = version + '-SNAPSHOT'
            }
            username = project.hasProperty("nexus.user") ? getProperty('nexus.user') : ''
            password = project.hasProperty("nexus.password") ? getProperty('nexus.password') : ''
        }
    }
    useStaging = false
}

